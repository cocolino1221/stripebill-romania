generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model invoices {
  id                 String    @id
  userId             String
  stripePaymentId    String    @unique
  stripeCustomerId   String?
  stripeAmount       Int
  stripeCurrency     String    @default("eur")
  customerName       String?
  customerEmail      String?
  customerAddress    String?
  customerVat        String?
  invoiceNumber      String?
  invoiceSeries      String?
  invoiceDate        DateTime  @default(now())
  dueDate            DateTime?
  description        String
  quantity           Int       @default(1)
  unitPrice          Int
  vatRate            Int       @default(21)
  totalAmount        Int
  providerInvoiceId  String?
  providerInvoiceUrl String?
  pdfPath            String?
  status             String    @default("pending")
  errorMessage       String?
  emailSent          Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime
  users              users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                           String     @id
  name                         String?
  email                        String     @unique
  emailVerified                DateTime?
  image                        String?
  password                     String?
  passwordResetToken           String?
  passwordResetExpires         DateTime?
  createdAt                    DateTime   @default(now())
  updatedAt                    DateTime
  stripeAccountId              String?
  stripeAccessToken            String?
  stripeConnectClientId        String?
  userWebhookToken             String?
  stripeCustomerId             String?
  subscriptionId               String?
  subscriptionStatus           String?
  subscriptionPriceId          String?
  subscriptionCurrentPeriodEnd DateTime?
  freeInvoicesUsed             Int        @default(0)
  invoiceProvider              String?
  smartbillApiKey              String?
  smartbillUsername            String?
  fgoApiKey                    String?
  invoiceSeries                String?
  companyName                  String?
  companyVat                   String?
  companyAddress               String?
  bankAccount                  String?
  defaultVatRate               Int        @default(21)
  stripePricesIncludeVat       Boolean    @default(false)
  accounts                     accounts[]
  invoices                     invoices[]
  sessions                     sessions[]
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model webhook_events {
  id            String   @id
  stripeEventId String   @unique
  eventType     String
  processed     Boolean  @default(false)
  error         String?
  createdAt     DateTime @default(now())
}
